// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                 String  @default(cuid()) @id
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id String @default(cuid()) @id
  email String?  @unique
  username String
  password String
  words Word[]
  categories Category[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sessions  Session[]
  accounts  Account[]
  emailVerified DateTime?
}

model Session {
  id              String      @default(cuid()) @id
  sessionToken    String      @unique
  userId          String      
  expires         DateTime    @map("expiresAt")
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id              String      @default(cuid()) @id
  identifier      String
  token           String      @unique
  expires         DateTime    @map("expiresAt")
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id String @default(cuid()) @id
  categoryName String
  words Word[]
  user User @relation(fields: [userId], references: [id])
  userId String 
}

model Word {
  id String @default(cuid()) @id
  word String
  pronunciation String?
  PartsOfSpeach String?
  image String?
  memoryProcess Int
  testCount Int
  favorite Boolean @default(false)
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId String
  category Category @relation(fields: [categoryId], references: [id])
  categoryId String 
  definition Definition @relation(fields: [definitionId], references: [id])
  definitionId String
  example Example @relation(fields: [exampleId], references: [id])
  exampleId String 
}

model Definition {
  id String @default(cuid()) @id
  definition String
  words Word[]
}

model Example {
  id String @default(cuid()) @id
  sentence String
  words Word[]
}



